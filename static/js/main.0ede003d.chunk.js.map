{"version":3,"sources":["n1_main/m1-ui/component/Header/Header.tsx","n1_main/m1-ui/component/Profile/Profile.tsx","n1_main/m3-dal/api.ts","n1_main/m2-bll/registration-reducer.ts","n1_main/m1-ui/component/Registration/Registration.tsx","n1_main/m1-ui/component/PasswordChange/PasswordChange.tsx","n1_main/m1-ui/common/Input.tsx","n1_main/m1-ui/component/ForgotPassword/ForgotPassword.tsx","n1_main/m2-bll/profile-reducer.ts","n1_main/m2-bll/login-reducer.ts","n1_main/m1-ui/component/Login/Login.tsx","n1_main/m1-ui/App.tsx","n1_main/m2-bll/changePassword-reducer.ts","n1_main/m2-bll/store.ts","index.tsx","n1_main/m1-ui/component/Header/Header.module.css","n1_main/m1-ui/component/Profile/MainBlock.module.css","n1_main/m1-ui/component/Registration/Registration.module.css","n1_main/m1-ui/component/PasswordChange/PasswordChange.module.css","n1_main/m1-ui/component/ForgotPassword/ForgotPassword.module.css","n1_main/m1-ui/component/Login/Login.module.css"],"names":["Header","className","style","nav","exact","activeClassName","linkIsActive","link","to","Profile","useSelector","state","profile","name","avatar","mainBlock","title","instance","axios","create","baseURL","withCredentials","authAPI","data","post","InitialState","isLoggedIn","error","loaderStatus","setErrorRegistration","type","requestStatus","registrationReducer","action","validate","value","email","test","password","length","repeatPassword","Registration","dispatch","useDispatch","registration","formik","useFormik","initialValues","onSubmit","values","a","response","isOpen","LinearProgress","handleSubmit","placeholder","getFieldProps","errors","touched","color","disabled","Snackbar","open","autoHideDuration","onClose","event","reason","Alert","variant","severity","PasswordChange","InputMaterial","props","rest","TextField","id","label","ForgotPassword","Input","_id","isAdmin","rememberMe","profileReducer","userData","isAuth","loginReducer","Login","login","then","res","catch","e","message","console","log","FormControl","margin","FormControlLabel","control","Checkbox","Button","App","path","render","changePasswordReducer","rootReducer","combineReducers","changePassword","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.0ede003d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from \"./Header.module.css\"\r\n\r\n\r\nconst Header = () => {\r\n    return <nav className={style.nav}>\r\n        <NavLink exact activeClassName={style.linkIsActive} className={style.link} to=\"/\">Profile</NavLink>\r\n        <NavLink activeClassName={style.linkIsActive} className={style.link} to=\"/login\">Login</NavLink>\r\n        <NavLink activeClassName={style.linkIsActive} className={style.link} to=\"/registration\">Registration</NavLink>\r\n        <NavLink activeClassName={style.linkIsActive} className={style.link} to=\"/passwordChange\">Change Password</NavLink>\r\n    </nav>\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport style from \"./MainBlock.module.css\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\n\r\n\r\nexport const Profile = () => {\r\n\r\n    const {name, avatar} = useSelector<AppRootStateType, any>(state => state.profile)\r\n\r\n    return (\r\n        <div className={style.mainBlock}>\r\n            <div className=\"container\">\r\n                <h1 className={style.title}>Main page</h1>\r\n                <h3>{name}</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import axios from 'axios';\r\n\r\n// http://localhost:7542/2.0/  => local back\r\n\r\n// https://neko-back.herokuapp.com/2.0/  => remote back\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    ...settings,\r\n})\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseLoginType>(\"auth/login\", data);\r\n    },\r\n    registration(data: RegistrationDataType) {\r\n        return instance.post(\"auth/register\", data);\r\n    },\r\n}\r\n//types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type ResponseLoginType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error: string\r\n}\r\n\r\nexport type RegistrationDataType = {\r\n    email: string\r\n    password: string\r\n    repeatPassword?: string // not necessarily\r\n}","import {ActionTypes} from \"./store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, RegistrationDataType} from \"../m3-dal/api\";\r\n\r\nexport type InitialStateType = typeof InitialState;\r\nexport type RequestStatusType = 'idle' | 'loading'\r\nconst InitialState = {\r\n    isLoggedIn: false,\r\n    error: null as string | null,\r\n    loaderStatus: 'idle' as RequestStatusType\r\n}\r\n\r\nconst registrationReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"SET-IS-LOGGED-IN\": {\r\n            return {...state, isLoggedIn: true}\r\n        }\r\n        case \"SET-ERROR-REGISTRATION\": {\r\n            return {...state, error: action.error}\r\n        }\r\n        case \"SET-REQUEST-STATUS\": {\r\n            return {...state, loaderStatus: action.loaderStatus}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const setIsLoggedIn = () => (\r\n    {type: \"SET-IS-LOGGED-IN\"} as const\r\n)\r\nexport const setErrorRegistration = (error: string | null) => (\r\n    {type: \"SET-ERROR-REGISTRATION\", error} as const\r\n)\r\nexport const requestStatus = (loaderStatus: RequestStatusType) => (\r\n    {type: \"SET-REQUEST-STATUS\", loaderStatus} as const\r\n)\r\n\r\n\r\n//THUNK\r\n\r\nexport const registrationTC = (data: RegistrationDataType) => async (dispatch: Dispatch) => {\r\n    dispatch(requestStatus('loading'))\r\n    try {\r\n        await authAPI.registration(data)\r\n        dispatch(setIsLoggedIn())\r\n    } catch (e) {\r\n        dispatch(setErrorRegistration(e.response.data.error))\r\n    }\r\n    finally {\r\n        dispatch(requestStatus('idle'))\r\n    }\r\n}\r\n\r\nexport default registrationReducer;","import React from \"react\";\r\nimport style from \"../Registration/Registration.module.css\";\r\nimport {useFormik} from \"formik\";\r\nimport {RegistrationDataType} from \"../../../m3-dal/api\";\r\nimport {registrationTC, InitialStateType, setErrorRegistration} from \"../../../m2-bll/registration-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Alert} from \"@material-ui/lab\";\r\nimport {LinearProgress, Snackbar} from \"@material-ui/core\";\r\n\r\n\r\nconst validate = (value: RegistrationDataType) => {\r\n    let error: any = {};\r\n    if (!value.email) {\r\n        error.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value.email)) {\r\n        error.email = 'Invalid email address';\r\n    }\r\n    if (!value.password) {\r\n        error.password = 'Enter you password';\r\n    } else if (value.password.length < 7) {\r\n        error.password = 'Password must be 8 characters or more'\r\n    } else if (!value.repeatPassword) {\r\n        error.password = 'Please repeat you password';\r\n    } else if (value.repeatPassword !== value.password) {\r\n        error.password = 'Your passwords are not equal';\r\n    }\r\n    return error;\r\n}\r\n\r\nconst Registration = () => {\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn, error, loaderStatus} = useSelector<AppRootStateType, InitialStateType>(state => state.registration)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: '',\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            const {email, password} = values\r\n            dispatch(registrationTC({email, password}))\r\n        },\r\n    });\r\n    // SnackBarr Error\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setErrorRegistration(null));\r\n    }\r\n    const isOpen = error !== null;\r\n    // Redirect to Login after successful registration\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {loaderStatus === \"loading\" && <LinearProgress/>}\r\n            <div className=\"container\">\r\n                <h1 className={style.title}>Registration</h1>\r\n\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <div>\r\n                        <input\r\n                            name=\"email\"\r\n                            placeholder=\"Email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email && formik.touched.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            placeholder=\"Password\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            placeholder=\"Repeat Password\"\r\n                            name=\"repeatPassword\"\r\n                            {...formik.getFieldProps('repeatPassword')}\r\n                        />\r\n                        {formik.errors.password && formik.touched.password\r\n                            ? <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                            : null}\r\n                    </div>\r\n                    <button type=\"submit\" disabled={loaderStatus === \"loading\"}>Send</button>\r\n                </form>\r\n                <div>\r\n                    <Snackbar open={isOpen} autoHideDuration={5000} onClose={handleClose}>\r\n                        <Alert variant=\"filled\" severity=\"error\">\r\n                            {error}\r\n                        </Alert>\r\n                    </Snackbar>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Registration;","import React from \"react\";\r\nimport style from \"../PasswordChange/PasswordChange.module.css\";\r\n\r\nconst PasswordChange = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className={style.title}>Change password</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PasswordChange;","import React from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype InputPropsType = {\r\n    placeholder: string\r\n    label: string\r\n    type?: string\r\n    name?: string\r\n}\r\n\r\nconst InputMaterial = (props: InputPropsType, {...rest}) => {\r\n    return <TextField type={props.type} id=\"outlined-basic\" label={props.label} variant=\"outlined\" placeholder={props.placeholder} {...rest}/>\r\n}\r\n\r\nexport default InputMaterial;","import React from \"react\";\r\nimport InputMaterial from \"../../common/Input\";\r\nimport style from \"../ForgotPassword/ForgotPassword.module.css\"\r\n\r\nconst ForgotPassword = () => {\r\n    return <div>\r\n        <h1 className={style.title}>Forgot Password</h1>\r\n        <InputMaterial placeholder={\"password\"} label={\"password\"} />\r\n    </div>\r\n}\r\n\r\nexport default ForgotPassword;","import {ActionTypes} from \"./store\";\r\nimport {ResponseLoginType} from \"../m3-dal/api\";\r\ntype InitialStateType = typeof InitialState;\r\n\r\nconst InitialState = {\r\n    _id: \"\",\r\n    email: \"\",\r\n    name: \"\",\r\n    avatar: \"\",\r\n    isAdmin: false,\r\n    rememberMe: null\r\n}\r\n\r\nconst profileReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"SET-PROFILE-DATA\": {\r\n            return {...state, ...action.userData}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const setProfileDataAC = (userData: ResponseLoginType) => (\r\n    {type: \"SET-PROFILE-DATA\", userData} as const\r\n)\r\n\r\n\r\nexport default profileReducer;","import {ActionTypes} from \"./store\";\r\nimport {authAPI, LoginParamsType} from \"../m3-dal/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setProfileDataAC} from \"./profile-reducer\";\r\n\r\nconst loginReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\": {\r\n            return {...state, isAuth: action.value}\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n//AC\r\nexport const loginAC = (value: boolean) => (\r\n    {type: \"login/SET-IS-LOGGED-IN\", value} as const\r\n)\r\n\r\n\r\n//TC\r\nexport const LoginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionTypes>) => {\r\n    // SET-STATUS-PRELOADER\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            dispatch(loginAC(true))\r\n            dispatch(setProfileDataAC(res.data))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response ? e.response.data.error : (e.message + \" ,more details in the console\")\r\n            console.log(\"Error\", {...e})\r\n        })\r\n}\r\n\r\n\r\n//TYPES\r\nconst InitialState = {\r\n    isAuth: false\r\n}\r\n\r\ntype InitialStateType = typeof InitialState;\r\n\r\nexport default loginReducer;","import React from \"react\";\r\nimport style from \"../Login/Login.module.css\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {Button, Checkbox, FormControl, FormControlLabel, TextField} from \"@material-ui/core\";\r\nimport {LoginTC} from \"../../../m2-bll/login-reducer\";\r\n\r\nconst Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.login.isAuth)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } else if (values.password.length < 7) {\r\n                errors.password = \"Password > 7 symbols\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(LoginTC(values))\r\n        }\r\n    })\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className={style.title}>Login</h1>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        variant={\"outlined\"}\r\n                        {...formik.getFieldProps(\"email\")}\r\n                    />\r\n                    {formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n                    <br/>\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        variant={\"outlined\"}\r\n                        {...formik.getFieldProps(\"password\")}\r\n                    />\r\n                    {formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n                    <br/>\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox\r\n                            {...formik.getFieldProps(\"rememberMe\")}/>}\r\n                    /><br/>\r\n                    <Button type={'submit'} variant={'outlined'} color={'primary'}>Login</Button>\r\n                </FormControl>\r\n            </form>\r\n            <NavLink to={\"/forgotPassword\"}>Forgot Password</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\r\nimport Header from \"./component/Header/Header\";\r\nimport {Profile} from \"./component/Profile/Profile\";\r\nimport Registration from \"./component/Registration/Registration\";\r\nimport PasswordChange from \"./component/PasswordChange/PasswordChange\";\r\nimport ForgotPassword from \"./component/ForgotPassword/ForgotPassword\";\r\nimport Login from \"./component/Login/Login\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <HashRouter>\r\n                <Header/>\r\n                <Switch>\r\n                    <Route exact path='/' render={() => <Profile/>}/>\r\n                    <Route path='/login' render={() => <Login/>}/>\r\n                    <Route path='/registration' render={() => <Registration/>}/>\r\n                    <Route path='/passwordChange' render={() => <PasswordChange/>}/>\r\n                    <Route path='/forgotPassword' render={() => <ForgotPassword/>}/>\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {ActionTypes} from \"./store\";\r\ntype InitialStateType = typeof InitialState;\r\n\r\nconst InitialState = {}\r\n\r\nconst changePasswordReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"changePassword\": {\r\n\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const changePasswordAC = () => (\r\n    {type: \"changePassword\"} as const\r\n)\r\nexport default changePasswordReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\"\r\nimport profileReducer, {setProfileDataAC} from \"./profile-reducer\";\r\nimport loginReducer, {loginAC} from \"./login-reducer\";\r\nimport registrationReducer, {requestStatus, setErrorRegistration, setIsLoggedIn} from \"./registration-reducer\";\r\nimport changePasswordReducer, {changePasswordAC} from \"./changePassword-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    profile: profileReducer,\r\n    login: loginReducer,\r\n    registration: registrationReducer,\r\n    changePassword: changePasswordReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type ActionTypes = |\r\n    ReturnType<typeof setProfileDataAC> |\r\n    ReturnType<typeof loginAC> |\r\n    ReturnType<typeof setIsLoggedIn> |\r\n    ReturnType<typeof setErrorRegistration> |\r\n    ReturnType<typeof requestStatus> |\r\n    ReturnType<typeof changePasswordAC>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './n1_main/m1-ui/App';\r\nimport {store} from \"./n1_main/m2-bll/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__3Lhrs\",\"link\":\"Header_link__3bFcN\",\"linkIsActive\":\"Header_linkIsActive__1jpq9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"MainBlock_title__3IOeA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Registration_title__3Pq9E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"PasswordChange_title__3ld7Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ForgotPassword_title___De8Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Login_title__38KSR\"};"],"sourceRoot":""}