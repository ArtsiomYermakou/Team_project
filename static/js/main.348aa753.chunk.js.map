{"version":3,"sources":["n1_main/m1-ui/component/Nav.module.css","n1_main/m1-ui/component/MainBlock.module.css","n1_main/m1-ui/component/SecondPage.module.css","n1_main/m1-ui/component/Header.tsx","n1_main/m1-ui/component/SecondPage.tsx","n1_main/m1-ui/common/Input.tsx","n1_main/m1-ui/common/Button.tsx","n1_main/m1-ui/component/Main.tsx","n1_main/m1-ui/App.tsx","serviceWorker.ts","n1_main/m2-bll/mainReducer.ts","n1_main/m2-bll/secondReducer.ts","n1_main/m2-bll/store.ts","index.tsx"],"names":["module","exports","Header","className","style","nav","exact","activeClassName","linkIsActive","link","to","SecondPage","title","InputMaterial","props","TextField","id","label","variant","placeholder","ButtonMaterial","Button","color","nameButton","Main","mainBlock","Input","App","path","render","Boolean","window","location","hostname","match","InitialState","mainReducer","state","action","type","secondReducer","rootReducer","combineReducers","main","second","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,KAAO,kBAAkB,aAAe,4B,mBCAjFD,EAAOC,QAAU,CAAC,MAAQ,2B,mBCA1BD,EAAOC,QAAU,CAAC,MAAQ,4B,wMCWXC,EAPA,WACX,OAAO,yBAAKC,UAAWC,IAAMC,KACzB,kBAAC,IAAD,CAASC,OAAK,EAACC,gBAAiBH,IAAMI,aAAcL,UAAWC,IAAMK,KAAMC,GAAG,KAA9E,QACA,kBAAC,IAAD,CAASH,gBAAiBH,IAAMI,aAAcL,UAAWC,IAAMK,KAAMC,GAAG,WAAxE,Y,iBCLKC,EAAa,WACtB,OACI,6BACI,wBAAIR,UAAWC,IAAMQ,OAArB,iB,QCIGC,EAFO,SAACC,GAAD,OAA2B,kBAACC,EAAA,EAAD,CAAWC,GAAG,iBAAiBC,MAAOH,EAAMG,MAAOC,QAAQ,WAAWC,YAAaL,EAAMK,e,SCC3HC,EAFQ,SAACN,GAAD,OAA4B,kBAACO,EAAA,EAAD,CAAQH,QAAQ,YAAYI,MAAM,WAAWR,EAAMS,a,iBCDzFC,EAAO,WAChB,OACI,yBAAKrB,UAAWC,IAAMqB,WAClB,wBAAItB,UAAWC,IAAMQ,OAArB,aACA,kBAACc,EAAD,CAAeP,YAAa,QAASF,MAAO,YAC5C,kBAACS,EAAD,CAAeP,YAAa,QAASF,MAAO,YAAY,6BACxD,kBAAC,EAAD,CAAgBM,WAAY,gBCSzBI,EAdH,WACR,OACI,yBAAKxB,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,yBAAKA,UAAU,SACX,kBAAC,IAAD,CAAOG,OAAK,EAACsB,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,EAAD,SACpC,kBAAC,IAAD,CAAOvB,OAAK,EAACsB,KAAK,UAAUC,OAAQ,kBAAM,kBAAC,EAAD,aCF1CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCfAC,EAAe,GAeNC,EAbK,WAAkE,IAAjEC,EAAgE,uDAAtCF,EAAcG,EAAwB,uCACjF,OAAQA,EAAOC,MACX,IAAK,OAGL,QACI,OAAOF,ICRbF,EAAe,GAeNK,EAbO,WAAkE,IAAjEH,EAAgE,uDAAtCF,EAAcG,EAAwB,uCACnF,OAAQA,EAAOC,MACX,IAAK,SAGL,QACI,OAAOF,ICNbI,EAAcC,YAAgB,CAChCC,KAAMP,EACNQ,OAAQJ,IAGCK,EAAQC,YAAYL,EAAaM,YAAgBC,MAO9DjB,OAAOc,MAAQA,E,YCTfI,IAASpB,OACL,kBAAC,IAAMqB,WAAP,KACI,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,QAGRM,SAASC,eAAe,SJ6HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.348aa753.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__4iB16\",\"link\":\"Nav_link__3D96H\",\"linkIsActive\":\"Nav_linkIsActive__3VhDK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"MainBlock_title__32f5o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"SecondPage_title__3bxqh\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from \"../component/Nav.module.css\"\r\n\r\n\r\nconst Header = () => {\r\n    return <nav className={style.nav}>\r\n        <NavLink exact activeClassName={style.linkIsActive} className={style.link} to=\"/\">Main</NavLink>\r\n        <NavLink activeClassName={style.linkIsActive} className={style.link} to=\"/Second\">Second</NavLink>\r\n    </nav>\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport style from \"./SecondPage.module.css\";\r\n\r\nexport const SecondPage = () => {\r\n    return (\r\n        <div>\r\n            <h1 className={style.title}>Second page</h1>\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype InputPropsType = {\r\n    placeholder: string\r\n    label: string\r\n}\r\n\r\nconst InputMaterial = (props: InputPropsType) => <TextField id=\"outlined-basic\" label={props.label} variant=\"outlined\" placeholder={props.placeholder}/>\r\n\r\nexport default InputMaterial;","import React from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype ButtonPropsType = {\r\n    nameButton: string\r\n}\r\n\r\nconst ButtonMaterial = (props: ButtonPropsType) => <Button variant=\"contained\" color=\"primary\">{props.nameButton}</Button>\r\n\r\nexport default ButtonMaterial;","import React from \"react\";\r\nimport InputMaterial from \"../common/Input\";\r\nimport ButtonMaterial from \"../common/Button\";\r\nimport style from \"../component/MainBlock.module.css\"\r\n\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <div className={style.mainBlock}>\r\n            <h1 className={style.title}>Main page</h1>\r\n            <InputMaterial placeholder={\"11111\"} label={\"Input 1\"}/>\r\n            <InputMaterial placeholder={\"22222\"} label={\"Input 2\"}/><br/>\r\n            <ButtonMaterial nameButton={\"Button :)\"}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {HashRouter, Route} from \"react-router-dom\";\nimport Header from \"./component/Header\";\nimport {SecondPage} from \"./component/SecondPage\";\nimport {Main} from \"./component/Main\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <HashRouter>\n                <Header/>\n                <div className=\"block\">\n                    <Route exact path='/' render={() => <Main/>}/>\n                    <Route exact path='/Second' render={() => <SecondPage/>}/>\n                </div>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ActionTypes} from \"./store\";\r\ntype InitialStateType = typeof InitialState;\r\n\r\nconst InitialState = {}\r\n\r\nconst mainReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"Test\": {\r\n\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const Test = () => (\r\n    {type: \"Test\"} as const\r\n)\r\nexport default mainReducer;","import {ActionTypes} from \"./store\";\r\ntype InitialStateType = typeof InitialState;\r\n\r\nconst InitialState = {}\r\n\r\nconst secondReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"Second\": {\r\n\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const Second = () => (\r\n    {type: \"Second\"} as const\r\n)\r\nexport default secondReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\"\r\nimport mainReducer, {Test} from \"./mainReducer\";\r\nimport secondReducer, {Second} from \"./secondReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    main: mainReducer,\r\n    second: secondReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type ActionTypes = ReturnType<typeof Test> | ReturnType<typeof Second>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1_main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from \"./n1_main/m2-bll/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}