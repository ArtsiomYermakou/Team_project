{"version":3,"sources":["n1_main/m1-ui/component/Header/Header.module.css","n1_main/m1-ui/component/Main/MainBlock.module.css","n1_main/m1-ui/component/Login/Login.module.css","n1_main/m1-ui/component/Registration/Registration.module.css","n1_main/m1-ui/component/PasswordChange/PasswordChange.module.css","n1_main/m1-ui/component/Header/Header.tsx","n1_main/m1-ui/component/Main/Main.tsx","n1_main/m1-ui/common/Input.tsx","n1_main/m1-ui/common/Button.tsx","n1_main/m1-ui/component/Login/Login.tsx","n1_main/m1-ui/component/Registration/Registration.tsx","n1_main/m1-ui/component/PasswordChange/PasswordChange.tsx","n1_main/m1-ui/App.tsx","serviceWorker.ts","n1_main/m2-bll/main-reducer.ts","n1_main/m2-bll/login-reducer.ts","n1_main/m2-bll/store.ts","index.tsx"],"names":["module","exports","Header","className","style","nav","exact","activeClassName","linkIsActive","link","to","Main","mainBlock","title","InputMaterial","props","rest","TextField","id","label","variant","placeholder","ButtonMaterial","Button","color","nameButton","Login","Input","Registration","PasswordChange","App","path","render","Boolean","window","location","hostname","match","InitialState","mainReducer","state","action","type","loginReducer","rootReducer","combineReducers","main","login","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b512933.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__3Lhrs\",\"link\":\"Header_link__3bFcN\",\"linkIsActive\":\"Header_linkIsActive__1jpq9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"MainBlock_title__1of2G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Login_title__38KSR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Registration_title__3Pq9E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"PasswordChange_title__3ld7Z\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from \"./Header.module.css\"\r\n\r\n\r\nconst Header = () => {\r\n    return <nav className={style.nav}>\r\n        <NavLink exact activeClassName={style.linkIsActive} className={style.link} to=\"/\">Main</NavLink>\r\n        <NavLink activeClassName={style.linkIsActive} className={style.link} to=\"/Login\">Login</NavLink>\r\n        <NavLink activeClassName={style.linkIsActive} className={style.link} to=\"/Registration\">Registration</NavLink>\r\n        <NavLink activeClassName={style.linkIsActive} className={style.link} to=\"/PasswordChange\">Change Password</NavLink>\r\n    </nav>\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport style from \"./MainBlock.module.css\"\r\n\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <div className={style.mainBlock}>\r\n            <h1 className={style.title}>Main page</h1>\r\n            <h3>Artem Ermakov</h3>\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype InputPropsType = {\r\n    placeholder: string\r\n    label: string\r\n}\r\n\r\nconst InputMaterial = (props: InputPropsType, {...rest}) => {\r\n    return <TextField id=\"outlined-basic\" label={props.label} variant=\"outlined\" placeholder={props.placeholder} {...rest}/>\r\n}\r\n\r\nexport default InputMaterial;","import React from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype ButtonPropsType = {\r\n    nameButton: string\r\n}\r\n\r\nconst ButtonMaterial = (props: ButtonPropsType, {...rest}) => {\r\n    return <Button variant=\"contained\" color=\"primary\" {...rest}>{props.nameButton}</Button>\r\n}\r\n\r\nexport default ButtonMaterial;","import React from \"react\";\r\nimport style from \"../Login/Login.module.css\";\r\nimport InputMaterial from \"../../common/Input\";\r\nimport ButtonMaterial from \"../../common/Button\";\r\n\r\nconst Login = () => {\r\n    return (\r\n        <div>\r\n            <h1 className={style.title}>Login</h1>\r\n            <InputMaterial placeholder={\"Login\"} label={\"Login\"} /><br/>\r\n            <InputMaterial placeholder={\"Password\"} label={\"Password\"} /><br />\r\n            <ButtonMaterial nameButton={\"Send\"}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\nimport style from \"../Registration/Registration.module.css\";\r\n\r\nconst Registration = () => {\r\n    return (\r\n        <div>\r\n            <h1 className={style.title}>Registration</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Registration;","import React from \"react\";\r\nimport style from \"../PasswordChange/PasswordChange.module.css\";\r\n\r\nconst PasswordChange = () => {\r\n    return (\r\n        <div>\r\n            <h1 className={style.title}>Change password</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PasswordChange;","import React from 'react';\nimport './App.css';\nimport {HashRouter, Route} from \"react-router-dom\";\nimport Header from \"./component/Header/Header\";\nimport {Main} from \"./component/Main/Main\";\nimport Login from \"./component/Login/Login\";\nimport Registration from \"./component/Registration/Registration\";\nimport PasswordChange from \"./component/PasswordChange/PasswordChange\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <HashRouter>\n                <Header/>\n                <div className=\"block\">\n                    <Route exact path='/' render={() => <Main/>}/>\n                    <Route exact path='/Login' render={() => <Login/>}/>\n                    <Route exact path='/Registration' render={() => <Registration/>}/>\n                    <Route exact path='/PasswordChange' render={() => <PasswordChange/>}/>\n                </div>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ActionTypes} from \"./store\";\r\ntype InitialStateType = typeof InitialState;\r\n\r\nconst InitialState = {}\r\n\r\nconst mainReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"Main\": {\r\n\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const MainAC = () => (\r\n    {type: \"Main\"} as const\r\n)\r\nexport default mainReducer;","import {ActionTypes} from \"./store\";\r\ntype InitialStateType = typeof InitialState;\r\n\r\nconst InitialState = {}\r\n\r\nconst loginReducer = (state: InitialStateType = InitialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case \"loginReducer\": {\r\n\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const loginAC = () => (\r\n    {type: \"loginReducer\"} as const\r\n)\r\nexport default loginReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\"\r\nimport mainReducer, {MainAC} from \"./main-reducer\";\r\nimport loginReducer, {loginAC} from \"./login-reducer\";\r\nimport {registrationAC} from \"./registration-reducer\";\r\nimport {changePasswordAC} from \"./changePassword-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    main: mainReducer,\r\n    login: loginReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type ActionTypes = |\r\n    ReturnType<typeof MainAC> |\r\n    ReturnType<typeof loginAC> |\r\n    ReturnType<typeof registrationAC> |\r\n    ReturnType<typeof changePasswordAC>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1_main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from \"./n1_main/m2-bll/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}